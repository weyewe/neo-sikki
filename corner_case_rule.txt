GroupLoan#close => split the compulsory savings to all member. round up to 500 IDR 
	#copy this rounding up from kkims
	
Before group_loan#close, they can create GroupLoanBadDebtPayment => for the uncollectibles 


TODO:
1. test the round up mechanism in the group loan default payment
2. 


What if in the same week, there are all those cases:
1. Member Deceased
2. Member Run Away
3. Member Uncollectible Amount
4. Member Premature Clearance 

Solution:

# Default Payment has many entries.the sum of all entries are the amount receivable . 
# choose: heavy data or heavy logic? 
# default payment entry is locked to the weekly_collection 
# default payment source 
1. Deactive deceased member << he doesn't have to pay for default payment. And default payment is assumed to be fulfilled. 
2. Deactivate member run away  + create uncollectible << it will change the default amount receivable 
3. Member premature clearance will need to bear the default amount from run_away and uncollectible 	
			Member C. 

How about the premature clearance is happening in week 3. 
In week 4, there is uncollectible >> The uncollectible default amount will not be burneded to the "Member C"

The information about default_loan amount_receivable is encompassing. 
If a member wants to
cancel his membership: just pay the default amount and the principal. Then, he is free 

SOP:
1. Create deceased member
2. Create Member run away
3. Create uncollectible loans 
4. confirm weekly collection
5. create GroupLoanPrematureClearancePayment << it means that the member has to pay for the current week
	If it has been paid, then the premature clearance can be done 
	
	
Confirmation is not needed. We have to enforce the SOP. However, what if they do the same shit? 

# SPEC this shit! 
# uncollectibe can't be created if there is premature clearance payment. 
# deceased member can't be created if there is premature clearance payment 
# run_away can't be created if there is premature clearance payment  => uniq glm 
# maintain uniqueness of premature clearance payment => uniq glm. 


Todo: 
continue with the mix_uncollectible_and_premature_clearance_spec.rb :
week 2 : 1 uncollectible
week 3 : 1 premature_clearance
week 4 : 1 uncollectible  << spec this ! : the amount of $$ is divided among active members. 
		SHIT. we have a problem over  here. 
		
			Total amount = total default - default_payment_cleared , splitted to all members


Success spec. ,

What are the other concern? 
run away (on the same week, or end_of_cycle), deceased, uncollectible, premature_clearance 



# the spec is done.. 
#	next step: UI work

how should the UI be done? 
0. Corner Cases 
	a. Create deceased member => we haven't created the payment 
	b. Create premature clearance
	c. Create RunAwayMember
	d. Create Uncollectible 
	
1. Master Data   => priority #1 
	a. create the User + add role 
	b. Create Group Loan Product
	c. Create Member 
	
	
2. Group Loan   => priority # 2 
	a. Create the GroupLoan  => assign group_leader
	b. Create GroupLoanMembership  (add group loan product) 
	c. Start GroupLoan => print the pdf (member list)
	c. disburse loan => prior to this, they can deactivate member. (haven't coded this)
	
3. Weekly Payment Cycle   => priority #3 

4. Savings => create savings, create withdrawal (savings_account)


============================ the segmentation 
1. Loan Management
	1.1 Setup Loan: GroupLoanProduct, GroupLoan(create + start + select), GroupLoanMembership, 
									assign group loan to the AccountOfficer 
	
	1.2 Operational: Deactivate GLM prior to LoanDisbursement, Perform Disbursement << admin
									Add Uncollectible,
									Confirm Weekly Collection,
									See DefaultPayment report 
		
	
2. Office Management 
	2.1.	Create User 
	2.2.	See report  (low priority) => Loan progress. How many loan in the 25% percentile. How many in 50% percentile, how many in 75-100?  => How can we measure completion? from the progress 
	
3. Central Admin 
	3.1 Corner Cases : Deceased Member, Run Away member (fatal)
	
	
	TODO: update default payment ON run_away creation, deceased member, and uncollectible. << Create, Update, Destroy. It will break some spec. 
	
	
	RUN AWAY = deactivate member
	Deceased = deactivate member >> ok. perform 3 updates. 
	
	
	
STILL premature clearance.. if there is run-away member in week 3, end_of_cycle payment, and premature clearance in week 2, how can we calculate the clearance payment amount ? 
		=> clearance_amount == principal*weeks_left + default payment 

If there is run-away in week 2, weekly_payment, and premature clearance in week 3, how can we calculate the clearance payment amount? 
		=> clearance_amount = principal*weeks_left + default_payment + sum_of_all_weekly_from run_away that is paid weekly by his payment clearance application week / active_group_loan_memberships including him 
		
		
		
# 	@group_loan_run_away_receivable.update the fucking amount. 


===================== run_away mixed with premature clearance 

Total weeks == 8 weeks
week 2 == run away , member C  => weekly payment  (not end of cycle) 
week 3 == premature_clearnce , member D pays full week 3 payment + contribution for week 3 run away.  
					premature_clearance_amount: 	5* principal + 
										5 weeks * weekly_run_away_amount / 7  (himself included) << rounded_up 
in the premature_clearane => extract_weekly_payment_share				
										
On week 4 = each active member pay for run_away, adjusted after the premature_clearance 

extract_weekly_run_away amount = GroupLoan.rounding_up( 
			total_weekly_run_away - premature_weekly_for_single_group, BigDecimal('500')
			) 
			
			
Next thing to be tested: what if run_away, uncollectible, deceased, and premature clearance is happening
in the same week?  
		=> We need to arrange the priority to maximize the amount recovered.

Deceased => adjust the default resolution pool   => after create, group_loan.update_default_amount 
Uncollectible => adjust the default resolution pool => after create , group_loan.update_default_amount

 
Run Away => Adjust the default resolution pool   => after_create, group_loan.update_default amount
					after_update => group_loan.update_default_amount => policy is made on the spot. 
					
premature clearance  << last one. After all defaults are summed up.  => update amount makes no difference. 
				since premature clearance won't add to default_amount.amount_receivable

Pretty much done.. do the spec! 



========= okay, group loan can't be confirmed if there are uncollectible payment. Extract the god-damned uncollectible.

=======> what if compulsory savings is not enough for the end-of-cycle default payment? bad debt expense


=> Done.. we have to reboot our test.


# on default creation: add the end_of_cycle default amount 
1. Test the normal cycle: loan disbursement => weekly payment => close group loan => withdraw remaining compulsory savings   [DON't PORT]... yeah baby.. withdraw the remaining compulsory savings. 

2. Test the Uncollectible. 
	Loan Disbursement => weekly payment => can't close group loan if there is uncollectible => close group loan => withdraw remaining compulsory savings 
	
3. Test the run away member => weekly resolution 
														=> end of cycle resolution 
														
		On weekly resolution: amount of $$ received by the cashier must be (active_members + run_away_weekly_resolution) * each principle payment
		
		On end_of_cycle resolution: amount of $$ == active_members + run_away_weekly_resolution 
		
		
4. Test the premature clearance 

5. Test the premature_clearance + run_away member (end_of_cycle and weekly_resolution)

6. Test the combination cases. 

7. DONE. 

		
		
		
And we have to build unconfirm mechanism.

Confirm => execute the transaction
UnConfirm => undo the transaction, if it has no further effect.
Then, you can change the variables in it. 


There are only 2 cases: run_away and uncollectible 

For uncollectible, it is not bailed out by the premature clearance member. 

RunAway member will be bailed out by premature clearance member. 

The question: 

weekly payment == remaining_payment_by_active_members + bailed_out_for_run_away_member 

for weekly collection => the bail_out will be adjusted. 
for end_of_cycle collection => the default_amount will be reduced. 

what if there are both weekly  and end_of_cycle resolution?

How should we allocate the lump-sum bail out?

example:

20 weeks
per member: 10K idr: principal (6k)  + interest (2k) + compulsory_savings(2k)

on week 5 : run_away weekly_resolution

on week 8 : premature clearance => has to pay for premature clearance: remaining principal - compulsory savings +  run_away_5  weekly resolution lump_sum 


on week 12 : run_away end_of_cycle resolution

on week 15 : premature clearance => premature clearance: remaining principal - compulsory savings + 
run_away_5 weekly_resolution lump_sum + run_away_12 end_of_cycle lump_sum 



Question: 
decide the amount of run_away_5 weekly resolution lump sum 
decide the premature clearance amount (remaining principal - compulsory savings + lump_sum to cover run away member)
decide the weekly_collection.amount receivable for week 9 (after premature clearance)


=====> first task... what if there is subsequent run_away and premature clearance

Rule: round_up on the money to be received
Rule: round_down on money to be paid by KKI

rule of thumb: minimize cost, maximize revenue 

=> how can we do the posting? 
there should be an account to keep the lump sum: deposit. 

PrematureClearanceDeposit => total sum is recorded at the group_loan
PrematureClearanceDepositUsage => use of the premature clearance.... (bound to the weekly payment)

On every weekly payment => it will be withdrawn

===========================================
week 5 == run_away, weekly resolved
week 8 == premature clearance.. 
19members remaining, 1 is premature_cleared on week 8.  start to be inactive on week 9

How much should the premature_clearance member pay? 
	week9-week20 principal amount return == 12 * principal 
	the compulsory savings is used to pay ==  - compulsory_savings 
	it has to pay its share for run_away member (lump sum) == lump_sum amount
	
	Hence, it boils down to the amount of lump sum amount..
	
	CASE 1: if the run_away is resolved at the end of the week
		Total remaining run_away payment == weekly_payment*12 
		The premature clearance member's share per week == weekly_payment*1/19 
		====> The lump sum to be paid:
					The premature clearance member's share for 12 week == weekly_payment*12*1/19 
		
		=> The adjustment of the weekly bail out== weekly_payment*1/19
		The final run_away payable weekly: weekly_payment*18/19
		
		Problem: the rounding up.
		
		Let's use number... 
		Lump sum to be paid: 10,000*12/19 == 6315.78  => will go to premature clearance deposit 
		
		initial bail out before premature_clearance == 10,000   
		The adjusted bail out:: 10,000*18/19 == 9473.68



		To maximize $$ == rounding up the lump sum:: 6315.78 => 6400   (extra profit: 84.22)
		To maximize $$ == rounding up the adjusted bail out:: 9500   (extra profit: 26.32)  => Double profit? 
		
		How can we account for this mechanism? 
			So, if the amount received (cash) is the same with the calculated
						weekly_collection + adjusted_run_away_weekly_resolution_bail_out 
						
			=> Proceed to deduct the premature_clearance_deposit, deduct so that the amount received
				is equal to number of active members + run_away_but_assumed_full_weekly_collection 
				
			=> At the end of loan cycle, there will be excess premature_clearance_deposit.. 
			
				==> go to revenue? indeed. 
				
	Case 2: what if it is decided as end_of_cycle resolved. 
		the lump_sum => component paid: principal + interest + compulsory savings 
		but the end_of_cycle is paid by using compulsory savings. 
		
		proposed solution: 
		the end compulsory savings:: base compulsory savings + remaining of premature_clearance_deposit
		
		it will be used to deduct the (interest+principal )*remaining_week of end_of_cycle payment 
		
		The remnant will be used for compulsory savings return. 
	
			
		In this way, we are being fair to the member. the only 'un' fair point: if
		the compulsory savings return is not a round number.=> 175.350
		175,000 will be returned. => (350 IDR is taken as rounding profit)
		
		
================== ok fair enough. what if there are subsequent run_away and premature clearance? )
=> another weekly_default resolution + premature clearance
		
week 5 == run_away, weekly resolved
week 8 == premature clearance..
week 10 == run_away, weekly resolved,
week 12 == premature clearance 

week_1 <= weekly_collection amount_receivable == 20 members <= week_8 

week_9 <= weekly_collection amount_receivable == 19 members + adjusted_run_away_member_1  <= week 12 

week_13 <= weekly_collection amount_receivable == 18_members + adjusted_run_away_member_2 <= week_20 

premature_clearance_8 == ? 
He has to bail out for his contribution for
		complete run_away_member weekly payment from week 9-20 (12 weeks)
		
		12weeks * run_away_5_weeky_payment /19   << rounded up 


adjusted_run_away_member_1 == run_away_5_weekly_payment*18/19 

premature_clearance_12 == ? 
He has to bail out for his contribution for 
	complete run_away_member_5 weekly payment from week 13-20 (8 weeks)
	complete run_away_member_10 weekly payment from week 13-20 (8 weeks) 
	
		8_weeks*run_away_5_weekly_payment/18   ( 18 remaining members, 2 run_away)
		8_weeks*run_away_10_weekly_payment/18  ( 18 remaining members, 2 run_away)
		
		total == 8weeks*(run_away_5_weekly + run_away_10_weekly)/18 
		
adjusted_run_away_2 = 8weeks*(run_away_5_weekly + run_away_10_weekly)*17/18 



Case: 1 weekly_resolved... 1 end_of_cycle resolved
=========================================================================
				
week 5 == run_away, weekly resolved
week 8 == premature clearance..
week 10 == run_away, end_of_cyle resolved,
week 12 == premature clearance 

week_1 <= weekly_collection amount_receivable == 20 members <= week_8 

week_9 <= weekly_collection amount_receivable == 19 members + adjusted_run_away_member_1  <= week_9

week_10 <= weekly_collection amount_receivable == 18 members + adjusted_run_away_member_1 <= week_12 

week_13 <= weekly_collection amount_receivable == 18_members + adjusted_run_away_member_2 <= week_20 

premature_clearance_8 == ? 
He has to bail out for his contribution for
		complete run_away_member weekly payment from week 9-20 (12 weeks)
		
		12weeks * run_away_5_weeky_payment /19   << rounded up 


adjusted_run_away_member_1 == run_away_5_weekly_payment*18/19 

premature_clearance_12 == ? 
He has to bail out for his contribution for 
	complete run_away_member_5 weekly payment from week 13-20 (8 weeks)
	complete run_away_member_10 weekly payment from week 13-20 (8 weeks) 
	
		8_weeks*run_away_5_weekly_payment/18   ( 18 remaining members, 2 run_away)
		8_weeks*run_away_10_weekly_payment/18  ( 18 remaining members, 2 run_away)
		
		total == 8weeks*(run_away_5_weekly + run_away_10_weekly)/18 
		
adjusted_run_away_2 = 8weeks*(run_away_5_weekly )*17/18   << we are not including the week 10 because it is done at the end_of_cycle 

=======> during the weekly collection, get the $$ from the premature_clearance_deposit
so that amount_receivable + x == active_member.weekly_colection + in_active_member_weely_resolved.weekly_collection

x = active_member.weekly_colection + in_active_member_weely_resolved.weekly_collection - amount_receivable
=> deducted from premature_clearance_deposit 


at the end of cycle... total $$ belonging to the member == 
total_compulsory_savings + remaining_premature_clearance_deposit - default_amount 

We will give them the history + summary. Do the division on their own. 

ok, fair enough. We aren't stealing any money from member. Just keeping more till the duration ends. 



======> Deceased => reducing the active_member pool... if there is uncollectible with deceased?
 => clear the uncollectible, clearance_case => deceased
What if deceased contains uncollectible?  => contributed to default payment. 
# uncollectible has clearance_case => end_of_cycle
# what if run away has uncollectible? => end_of_cycle clearance. 

oh, on deceased or run_away => update the uncollectible case => end_of_cycle clearance
initial clearance_case => cash_payment 


=======> What if we bring deceased into the equation? 


week 5 == run_away, weekly resolved
week 8 == premature clearance..
week 10 ==  deceased  
week 13 == premature clearance

week_1 <= weekly_collection amount_receivable == 19 members + run_away_member_1 <= week_8 

week_9 <= weekly_collection amount_receivable == 18 members + adjusted_run_away_member_1  <= week9
 premature clearance amount == 12_weeks*run_away_5_weekly_collection*1/19  
			(1/19 > 1 out of 19 remaining members)
			
adjusted_run_away_member_1 == run_away_5_weekly_collection* 18/19 
			(18/19> 18 remaining members, out of 19 including the premature cleared)


week 10 -week 13 => there is deceased member. it will pull down the active group loan 
	What is the expected amount received from the group? good question..
	Who is liable to pay for the run_away contribution from deceased member? 
		=> the group...  

		week10 <=   17members			+ adjusted_run_away_member_1								<= week13



week14 - week 20   (on week13 => premature clearance)
	what is premature clearance amount? week 14-week 20 == 7 weeks 
	premature_clearance_13 == 
	1.		(  7weeks*run_away_weekly_payment - remaining_premature_clearance_deposit) * 1/17 
			We are being fair.. only taking $$ that we need. 
			
			And we will have trouble of rebuilding the history.. taking the easy way..
			what is the hard way?
			
	2. if it is the first premature clearance : 
					premature clearance amount == 7_weeks*run_away_5_weekly_collection*1/17
					
		But this is the second premature clearance. Which means that there are parts paid by the first
		  premature clearance. 
		
			Hence: 7_weeks*run_away_5_weekly_collection*(1 - 1/19)/17    
			1/19 has been paid by the first premature_clearance.
			Leaving us with 18/19.. the portion of the second premature_clearance is 
			1/17 => => 7_weeks*run_away_5_weekly_collection*18/19*1/17
	
	
	amount to be paid by the rest of the member == 7weeks * run_away_weekly_payment*18/19 * 16/17 

	week14 <=    16members + double_adjusted_run_away_member_2               <= week20










======> + Uncollectible (can only be paid by hardcash. ). group loan can't be closed if there is still
uncleared uncollectible  => we can mark: clearance_case .. group_loan can't be closed if there is any uncleared uncollectible with clearance_case == end_of_cycle.. 


Yes.. done.. understood all the cases.. 

=> on weekly collection confirm, Amount receivable? => it has to be calculated. 



========= what if there are 2 subsequent premature clearance? 

week 5 == run_away, weekly resolved
week 10 == premature clearance
week 12 == premature clearance

week 1 <= 19_remaining_member + bail out for run_away member <= week 10 

week 10 == premature clearance
week 11 <=  18_remaining member  + adjusted_bail_out_1 <= week_12

			adjusted_bail_out_1 = 18/19*run_away_weekly_payment 
			
week 12 == premature_clearance_2

week13 <= 17_remaining_member + adjusted_bail_out_2 <= week_20

adjusted bail out 2 == 1 run_away_weekly_payment - contribution from premature_1 - contribution_from premature_2 

		contribution from premature_1 == 1/19*run_away_weekly_payment 
		contribution from premature_2 = 1/17*remaining_adjusted_run_away_weekly_payment_1 
		
		
			adjusted_bail_out_2	= 16/17* 18/19* run_away_weekly_payment 
					what is the algorithm to extract 1/17   and 18/19 ? 
					
					get the timeline indicating run_away, premature_clearance, sort by week number it happened
					priority => run_away, premature_clearance
					
					# algorithm to calculate adjusted_bail_out amount 
					
					1. if you bump into run_away, extract it to the run_away_bailout list 
					2. if you bump into a premature_clearance, multiply each run_away in the bailout list
						by 
						(number_of_active member on premature_clearance week start - number_of_premature_clearance_started)
						 divide_by number_of_active_member_on_premature_clearance_week_start
					
					
					That's it. Will this scheme work if there are 2 premature clearances on a given week? 
					
					
					
					
					
					
					
					
					
					What is the algorithm to calculate current week premature_clearance_payment_amount (to be paid by
						premature clearance member)? 
					0. if week <= current_week 
					1. if you bump into run_away, put it onto the bailout list
					2. if you bump into a premature clearance, multiply each run_away in the bailout list
						by 
						(number_of_active member on premature_clearance week start - number_of_premature_clearance_started that week)
						 divide_by number_of_active_member_on_premature_clearance_week_start
						
					3. Then, we will have array of remaining_premature_clearance up to last week
					4. To get the premature clearance amount for 1 member for this week: 
					multiply each remaining_run_away_weekly_payment by 
					(1/active_member_this_week)  * number_of_remaining_weeks 
						=> we have the amount of premature clearance for a member. 
						
						=> rounded UP! 
					
					
					Then, sum all premature_clearance amount for this week. => amount receivable.
					
					
					# are we supposed to pre-cache the amount-receivable? 
					YES.. component of amount receivable: 
							normal payment + 
							premature_clearance_payment + 
							bail_out_for_run_away
							
							Why do we need to pre-cache it? Because the calculation is heavy. And
							it must be shown up at the amount receivable.
							There is no flexibility. it must be that $$. not more not less.
							amount_receivable  
							actual_amount_receivable
							
							What we save: the amount received. 
							ok.. let's just say that it has to be seen after the index is clicked.. no problem.. 
							
							After the index is clicked: show the breakdown of amount receivable. 
							1. base weekly payment
							2. adjusted_bail_out for run away member 
							3. UncollectiblePayment 
							4. premature clearance
							
							total amount = 1+2+4 - 3 
							
							On display details: show these amount. s
							
							
							premature_clearance_amount == weekly_resolved contribution + end_of_cycle contribution
								weekly_resolved => use this tedious shite. 
								end_of_cycle contribution: 
								
								(1/number_of_active_member_at_run_away) * 
										remaining_week_since_run_away (including the run away week)
					
			
